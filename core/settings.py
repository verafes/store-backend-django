"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from pathlib import Path
from dotenv import load_dotenv
from os import getenv, system, path

load_dotenv(dotenv_path=Path('.env'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DJANGO_DIR_MIGRATIONS='db/migrations'
BASE_DIR_MIGRATIONS = path.join(BASE_DIR, DJANGO_DIR_MIGRATIONS)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(getenv('DJANGO_SECRET_KEY', 'lei@qwe%78fmksefo024'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(getenv('DJANGO_DEBUG', False))

ALLOWED_HOSTS = ['*',]
CSRF_TRUSTED_ORIGINS=['http://127.0.0.1:9999',]

# Application definition

MIGRATIONS_APPS = [
    'products',
    'orders',
    'customers',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'rest_framework_simplejwt',
]

INSTALLED_APPS = INSTALLED_APPS + MIGRATIONS_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DB_TYPE = getenv('DB_TYPE', 'sqlite')
if DB_TYPE == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
elif DB_TYPE == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': getenv('DB_NAME'),
            'USER': getenv('DB_USER'),
            'DB_PASSWORD': getenv('DB_PASSWORD'),
            'DB_HOST': getenv('DB_HOST'),
            'DB_PORT': getenv('DB_PORT'),
            }
        }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 2
}

AWS_ACCESS_KEY_ID = getenv('MINIO_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = getenv('MINIO_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = getenv('MINIO_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = f"http://{getenv('MINIO_ENDPOINT_URL')}:{getenv('MINIO_PORT')}"
MINIO_EXT_ENDPOINT = getenv('MINIO_EXT_ENDPOINT`1')

# django < 4.2
# DEFAULT_FILE_STORAGE = getenv('DOCKER_DEFAULT_FILE_STORAGE')
DEFAULT_FILE_STORAGE = 'core.storage.FixUlrStorage'
# django >= 4.2
# STORAGES = getenv('DOCKER_STORAGES')

STATIC_ROOT = BASE_DIR / 'static'

# MIGRATIONS_MODELS = {
#     'products': 'db.migrations.products',
#     'orders': 'db.migrations.orders',
#     'customers': 'db.migrations.customers',
# }

MIGRATION_MODULES = {}
for app in MIGRATIONS_APPS:
    # MIGRATION_MODULS[app] = f'db.migrations.{app}'
    MIGRATION_MODULES[app] = DJANGO_DIR_MIGRATIONS.replace('/', '.') + "." + app
    system(f'mkdir -p {BASE_DIR_MIGRATIONS}/{app}')
    system(f'touch {BASE_DIR_MIGRATIONS}/{app}/__init__.py')
